import { BigInteger } from 'jsbn';
export declare const LIST_PRIMES: bigint[];
export declare const LIST_PRIMES_SIZE: number;
export declare const ASCII_TABLE_SIZE = 127n;
export declare const number_ASCII_TABLE_SIZE: number;
export declare const ASCII_ALPHABET_INDEX = 65;
export declare function getAsciiCodes(s: string): bigint[];
export declare const zip: <T, U = T>(a: T[], b: U[]) => (T | U)[][];
export declare function generateRandomString(length: number): string;
export declare function generatePrime(bytes: number): Promise<BigInteger>;
export declare function gcd(a: bigint, b: bigint): bigint;
export declare function extendedEuclidean(a: bigint, b: bigint): bigint[];
export declare function getRandomInt(min: number, max: number): number;
export declare function getRandomPrime(cap?: number): bigint;
export declare function bigintToBigInteger(bigint: bigint): BigInteger;
export declare function stringToNumber(plaintext: string): bigint;
export declare function asciiToHex(str: string, x?: number): string;
export declare function hexToBigInteger(hex: string): BigInteger;
export declare function hexToAscii(hex: string, x?: number): string;
export declare function hexToXByteBigIntegerArray(hex: string, x: number): BigInteger[];
export declare function bigIntegerToHex(bigint: BigInteger): string;
export declare function bigIntegerToXBytePaddedHex(bigint: BigInteger, x: number): string;
export declare function bigIntToXBytePaddedHex(bigint: bigint, x: number): string;
export declare function modPow(value: BigInteger, exponent: BigInteger, modulus: BigInteger): BigInteger;
export declare function multiplyHexStrings(a: string, b: string): string;
